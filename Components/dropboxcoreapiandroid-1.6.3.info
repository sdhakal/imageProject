{"Name":"Dropbox Core API Android SDK","Id":1959,"Alias":"dropboxcoreapiandroid","Description":"The Core API provides a flexible way to read and write to Dropbox. It includes support for advanced functionality like search, revisions, and restoring files. While Drop-ins are simpler to integrate and use, the Core API can be a better fit for deeper integration.\n\nThe Core API is based on HTTP and OAuth and provides low-level calls to access and manipulate a user\u0027s Dropbox account.\n\n### Dropbox Keys\n\nThe first thing you have to do is to register a new app on the App Console. You\u0027ll need the app key and secret to access the Core API.\n\n### Add AuthActivity to AndroidManifest\n\nOnce you have the app keys, we\u0027ll need to enter the following snippet in your AndroidManifest.xml in order for the Dropbox SDK to finish the authentication process. Insert the following code under the \u003capplication\u003e section, replacing YOUR_APP_KEY with your app key:\n\n```xml\n\n\u003cactivity\n  android:name=\"com.dropbox.client2.android.AuthActivity\"\n  android:launchMode=\"singleTask\"\n  android:configChanges=\"orientation|keyboard\"\u003e\n  \u003cintent-filter\u003e\n    \u003c!-- Change this to be db- followed by your app key --\u003e\n    \u003cdata android:scheme=\"db-YOUR_APP_KEY\" /\u003e\n    \u003caction android:name=\"android.intent.action.VIEW\" /\u003e\n    \u003ccategory android:name=\"android.intent.category.BROWSABLE\"/\u003e\n    \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e\n  \u003c/intent-filter\u003e\n\u003c/activity\u003e\n\n```\n\nAlso make sure that your app has the internet permission by ensuring you have the following under the \u003cmanifest\u003e section of AndroidManifest.xml:\n\n```xml\n\n\u003cuses-permission android:name=\"android.permission.INTERNET\"\u003e\u003c/uses-permission\u003e\n\n```\n\nNow you\u0027re all set to start interacting with Dropbox.\n\n## Authenticating with Dropbox\n\nYou\u0027ll need to provide the app key and secret you received when creating the app.\n\nAdd the following lines of code to link a user\u0027s Dropbox account to your\napp:\n\n```csharp\n\nstring AppKey = \"YOUR_APP_KEY\";\nstring AppSecret = \"YOUR_APP_SECRET\";\nDropboxAPI dropboxApi;\n\nprotected async override void OnStart ()\n{\n\tbase.OnStart ();\n\t\n\tAppKeyPair appKeys = new AppKeyPair(AppKey, AppSecret);\n\tAndroidAuthSession session = new AndroidAuthSession(appKeys);\n\tdropboxApi = new DropboxAPI (session);\n\t(DropboxApi.Session as AndroidAuthSession).StartOAuth2Authentication (this);\n}\n\n```\n\nUpon authentication, users are returned to the activity from which they came. To finish authentication after the user returns to your app, you\u0027ll need to put the following code in your onResume function.\n\n```csharp\n\nprotected async override void OnResume ()\n{\n\tbase.OnResume ();\n\n\t// After you allowed to link the app with Dropbox,\n\t// you need to finish the Authentication process\n\tvar session = DropboxApi.Session as AndroidAuthSession;\n\tif (!session.AuthenticationSuccessful ())\n\t\treturn;\n\t\n\ttry {\n\t\t// Call this method to finish the authentication process\n\t\tsession.FinishAuthentication ();\n\t} catch (IllegalStateException ex) {\n\t\tToast.MakeText (this, ex.LocalizedMessage, ToastLength.Short).Show ();\n\t}\n}\n\n```\n\nOnce you\u0027ve added the code above, you\u0027re ready to link the user\u0027s\nDropbox account from your UI.","Version":"1.6.3","Summary":"The Core API is based on HTTP and OAuth and provides low-level calls to access and manipulate a user\u0027s Dropbox account.","QuickStart":"The Core API provides a flexible way to read and write to Dropbox. It includes support for advanced functionality like search, revisions, and restoring files. While Drop-ins are simpler to integrate and use, the Core API can be a better fit for deeper integration.\n\nThe Core API is based on HTTP and OAuth and provides low-level calls to access and manipulate a user\u0027s Dropbox account.\n\n### Dropbox Keys\n\nThe first thing you have to do is to register a new app on the App Console. You\u0027ll need the app key and secret to access the Core API.\n\n### Add AuthActivity to AndroidManifest\n\nOnce you have the app keys, we\u0027ll need to enter the following snippet in your AndroidManifest.xml in order for the Dropbox SDK to finish the authentication process. Insert the following code under the \u003capplication\u003e section, replacing YOUR_APP_KEY with your app key:\n\n```xml\n\n\u003cactivity\n  android:name=\"com.dropbox.client2.android.AuthActivity\"\n  android:launchMode=\"singleTask\"\n  android:configChanges=\"orientation|keyboard\"\u003e\n  \u003cintent-filter\u003e\n    \u003c!-- Change this to be db- followed by your app key --\u003e\n    \u003cdata android:scheme=\"db-YOUR_APP_KEY\" /\u003e\n    \u003caction android:name=\"android.intent.action.VIEW\" /\u003e\n    \u003ccategory android:name=\"android.intent.category.BROWSABLE\"/\u003e\n    \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e\n  \u003c/intent-filter\u003e\n\u003c/activity\u003e\n\n```\n\nAlso make sure that your app has the internet permission by ensuring you have the following under the \u003cmanifest\u003e section of AndroidManifest.xml:\n\n```xml\n\n\u003cuses-permission android:name=\"android.permission.INTERNET\"\u003e\u003c/uses-permission\u003e\n\n```\n\nNow you\u0027re all set to start interacting with Dropbox.\n\n\n## Authenticating with Dropbox\n\nYou\u0027ll need to provide the app key and secret you received when creating the app.\n\nAdd the following lines of code to link a user\u0027s Dropbox account to your\napp:\n\n```csharp\n\nstring AppKey = \"YOUR_APP_KEY\";\nstring AppSecret = \"YOUR_APP_SECRET\";\nDropboxAPI dropboxApi;\n\nprotected async override void OnStart ()\n{\n\tbase.OnStart ();\n\t\n\tAppKeyPair appKeys = new AppKeyPair(AppKey, AppSecret);\n\tAndroidAuthSession session = new AndroidAuthSession(appKeys);\n\tdropboxApi = new DropboxAPI (session);\n\t(DropboxApi.Session as AndroidAuthSession).StartOAuth2Authentication (this);\n}\n\n```\n\nUpon authentication, users are returned to the activity from which they came. To finish authentication after the user returns to your app, you\u0027ll need to put the following code in your onResume function.\n\n```csharp\n\nprotected async override void OnResume ()\n{\n\tbase.OnResume ();\n\n\t// After you allowed to link the app with Dropbox,\n\t// you need to finish the Authentication process\n\tvar session = DropboxApi.Session as AndroidAuthSession;\n\tif (!session.AuthenticationSuccessful ())\n\t\treturn;\n\t\n\ttry {\n\t\t// Call this method to finish the authentication process\n\t\t// Will bind the user\u0027s access token to the session.\n\t\tsession.FinishAuthentication ();\n\t\t\n\t\t// Save the Access Token somewhere\n\t\tvar accessToken = session.OAuth2AccessToken;\n\t} catch (IllegalStateException ex) {\n\t\tToast.MakeText (this, ex.LocalizedMessage, ToastLength.Short).Show ();\n\t}\n}\n\n```\n\nYou\u0027ll need the access token again after your app closes, so it\u0027s important to save it for future access (though it\u0027s not shown here). If you don\u0027t, the user will have to re-authenticate every time they use your app.\n\nOnce you\u0027ve added the code above, you\u0027re ready to link the user\u0027s\nDropbox account from your UI.\n\n### Invoke methods on background\n\nMost methods in the Core API makes a network call, so make sure to invoke it on a background thread. (If you run this on the main thread, you\u0027ll see a NetworkOnMainThreadException.)\n\n\n## Retrieving metadata (Files or folder)\n\nOnce you\u0027ve linked your app to a Dropbox account, you may want to list\nthe contents of your app\u0027s exclusive Dropbox folder. To achieve this,\nyou just need to call the `Metadata` method:\n\n```csharp\n\n// Remember to invoke this on a background thread because makes a network call\nvar metadata = DropboxApi.Metadata (DropboxFolderPath, fileLimit, hash, true, rev);\n\n```\n\n- The first parameter specifies the path where you want to get the files, it could be a file path or a folder path.\n- The second parameter specifies the limit of files that you want to download\n- The third parameter specifies the hash of the folder or file\n- The fourth parameter specifies if you want to get all the info of the files if true, in case that is a folder path\n- The fifth parameter specifies the revision of the file that you want to download\n\nFor more info, see the documentation[1]\n\n[1]: https://www.dropboxstatic.com/static/developers/dropbox-android-sdk-1.6.3-docs/com/dropbox/client2/DropboxAPI.html#metadata(java.lang.String,%20int,%20java.lang.String,%20boolean,%20java.lang.String)\n\n\n## Working with files\n\n### Downloading files\n\nUntil now, you only have the metadata of the file or directory, but you don\u0027t\nhave the file itself. To download the desired file, you just need \nthe `GetFile` method, the DropboxPath and a file stream where you \nwant it to be downloaded:\n\n```csharp\n\nusing (var output = File.OpenWrite (localPath)) {\n\t// Gets the file from Dropbox and saves it to the local folder\n\tDropboxApi.GetFile (DropboxFilePath, null, output, null);\n}\n\n```\n\nFor images is a similar process, the difference is that you need to specify the size of the image and the format:\n\n```csharp\n\nusing (var output = File.OpenWrite (localPath)) {\n\t// Gets the image from Dropbox and saves it to the local folder\n\tDropBoxApi.GetThumbnail (DropboxImagePath, output, DropboxApi.ThumbSize.BestFit1024x768, DropboxApi.ThumbFormat.Jpeg, null);\n}\n\n```\n\n### Uploading files\n\nUploading files to Dropbox is a similar process to downloading files. You need to Open the file in a read mode and upload it to Dropbox with the `PutFile` method:\n\n```csharp\n\nusing (var input = File.OpenRead (localPath)) {\n\t// Gets the local file and upload it to Dropbox\n\tDropBoxApi.PutFile (DropboxFilePath, input, input.Length, null, null);\n}\n\n```","Hash":"018e23a3c8580c8e93de462d10c514e5","TargetPlatforms":["android"],"TrialHash":null}