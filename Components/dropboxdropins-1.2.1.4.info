{"Name":"Dropbox Drop-ins","Id":1511,"Alias":"dropboxdropins","Description":"This component allows you to add Dropbox Chooser Drop-in into your Xamarin.iOS app with a few lines of code.\n\nDropbox Chooser on iOS\n======================\n\n## Creating a Url scheme\n\nThe Chooser coordinates with the Dropbox app to allow the user to select files without having to worry about the usual authorization flow. But in order to smoothly hand the user back to your app, you need to add a unique URL scheme that Dropbox can call. You\u0027ll need to configure your project to add one:\n\n1. Double-click on your app\u0027s Info.plist file\n2. Select the Advanced Tab\n3. Find the Url Types Section \n4. Click Add URL Type and set URL Schemes to `db-DropboxKey` (i.e. \"db-aaa111bbb2222\").\n\nYou can get your key from [Dropbox App Console](https://www.dropbox.com/developers/apps).)\n\n### AppDelegate.cs\n\n```csharp\nusing Dropins.Chooser.iOS;\n//...\n\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\tif (DBChooser.DefaultChooser.HandleOpenUrl (url)) {\n\t\t// This was a Chooser response and handleOpenURL automatically ran the\n\t\t// completion handler\t\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n```\n\n### YourViewController.cs\n\n```csharp\nusing Dropins.Chooser.iOS;\n//...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\t// Create the button that will call Dropbox Chooser.\n\tbtnChooser = UIButton.FromType (UIButtonType.RoundedRect);\n\tbtnChooser.Frame = new System.Drawing.RectangleF (20, 225, 280, 30);\n\tbtnChooser.SetTitle (\"Choose File\", UIControlState.Normal);\n\n\t// Open the chooser when the user taps the button\n\tbtnChooser.TouchUpInside += (sender, e) =\u003e {\n\n\t\t// This will open the chooser view\n\t\tDBChooser.DefaultChooser.OpenChooser (DBChooserLinkType.Direct, this, (results) =\u003e {\n\t\t\t// results is null if the user cancels\n\t\t\tif (results == null)\n\t\t\t\tnew UIAlertView (\"Cancelled\", \"User cancelled!\", null, \"Continue\").Show ();\n\t\t\t// Do something with the results\n\t\t\telse {\n\t\t\t\tstring fileName = results[0].Name;\n\t\t\t\tnew UIAlertView (\"File Selected\", fileName , null, \"Continue\").Show ();\n\t\t\t} \n\t\t});\n\t};\n}\n\n```\n\n# News: iOS Unified API Support\n\nDropbox Chooser on Android\n==========================\n\n## Triggering the Chooser\n\nYour app should give the user a button or action that asks them to select a file from Dropbox. You\u0027ll need the App key. You can get your key from [Dropbox App Console](https://www.dropbox.com/developers/apps).\n\n```csharp\nDBChooser chooser;\nconst int dropboxRequest = 0; // You can change this if needed\nconst string dropboxAppKey = \"APP_KEY\";\n\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\t// Set our view from the \"main\" layout resource\n\tSetContentView (Resource.Layout.Main);\n\n\tchooser = new DBChooser (dropboxAppKey);\n\n\t// Get our button from the layout resource,\n\t// and attach an event to it\n\tFindViewById\u003cButton\u003e (Resource.Id.btnDirect).Click += delegate {\n\t\t// It could be:\n\t\t// DBChooser.ResultType.DirectLink\n\t\t// DBChooser.ResultType.PreviewLink or\n\t\t// DBChooser.ResultType.FileContent\n\t\tchooser.ForResultType (DBChooser.ResultType.Type).Launch (this, dropboxRequest);\n\t};\n}\n\nprotected override void OnActivityResult (int requestCode, Result resultCode, Intent data)\n{\n\tif (requestCode != dropboxRequest)\n\t\tbase.OnActivityResult (requestCode, resultCode, data);\n\n\tif (resultCode != Result.Ok) {\n\t\t// Failed or was cancelled by the user.\n\t}\n\t\n\tvar result = new DBChooser.Result (data);\n\n\t// Handle the result\n\n}\n```","Version":"1.2.1.4","Summary":"Add Dropbox Chooser to your app with a few lines of code.","QuickStart":"This component allows you to add Dropbox Chooser Drop-in into your Xamarin.iOS app with a few lines of code.\n\nDropbox Chooser on iOS\n======================\n\n## Creating a Url scheme\n\nThe Chooser coordinates with the Dropbox app to allow the user to select files without having to worry about the usual authorization flow. But in order to smoothly hand the user back to your app, you need to add a unique URL scheme that Dropbox can call. You\u0027ll need to configure your project to add one:\n\n1. Double-click on your app\u0027s Info.plist file\n2. Select the Advanced Tab\n3. Find the Url Types Section \n4. Click Add URL Type and set URL Schemes to `db-DropboxKey` (i.e. \"db-aaa111bbb2222\").\n\nYou can get your key from [Dropbox App Console](https://www.dropbox.com/developers/apps).\n\n### AppDelegate.cs\n\n```csharp\nusing Dropins.Chooser.iOS;\n//...\n\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\tif (DBChooser.DefaultChooser.HandleOpenUrl (url)) {\n\t\t// This was a Chooser response and handleOpenURL automatically ran the\n\t\t// completion handler\t\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n```\n\n### YourViewController.cs\n\n```csharp\nusing Dropins.Chooser.iOS;\n//...\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\t// Create the button that will call Dropbox Chooser.\n\tbtnChooser = UIButton.FromType (UIButtonType.RoundedRect);\n\tbtnChooser.Frame = new System.Drawing.RectangleF (20, 225, 280, 30);\n\tbtnChooser.SetTitle (\"Choose File\", UIControlState.Normal);\n\n\t// Open the chooser when the user taps the button\n\tbtnChooser.TouchUpInside += (sender, e) =\u003e {\n\n\t\t// This will open the chooser view\n\t\tDBChooser.DefaultChooser.OpenChooser (DBChooserLinkType.Direct, this, (results) =\u003e {\n\t\t\t// results is null if the user cancels\n\t\t\tif (results == null)\n\t\t\t\tnew UIAlertView (\"Cancelled\", \"User cancelled!\", null, \"Continue\").Show ();\n\t\t\t// Do something with the results\n\t\t\telse {\n\t\t\t\tstring fileName = results[0].Name;\n\t\t\t\tnew UIAlertView (\"File Selected\", fileName , null, \"Continue\").Show ();\n\t\t\t} \n\t\t});\n\t};\n}\n\n```\n\n## Link types\n\nThe Chooser can be configured to return one of two link types.\n\n* **DBChooserLinkType.Preview**: Preview links point to a human-friendly preview page of a file and are great for sharing. You can read more about links to Dropbox files in our Help Center. Note that users may disable this link at a later point if they choose.\n\n* **DBChooserLinkType.Direct**: Links point directly to the contents of the file and are useful for downloading the file itself. Unlike preview links, however, they will expire after four hours, so make sure to download the contents of the file immediately after the file is chosen. Direct links also support CORS, which allows you to read the file information directly in the browser using client-side JavaScript.\n\n## Handling multiple app keys\n\nThe example uses the defaultChooser, which is created and initialized with the URL Scheme you registered during setup. You may have a project that requires multiple app keys because it also uses the Core or Sync API. In this case, you\u0027ll need to explicitly initialize your own instance of the Chooser with the right app key by using the constructor that takes the string key as parameter.\n\n# News: iOS Unified API Support\n\nDropbox Chooser on Android\n==========================\n\n## Triggering the Chooser\n\nYour app should give the user a button or action that asks them to select a file from Dropbox. You\u0027ll need the App key. You can get your key from [Dropbox App Console](https://www.dropbox.com/developers/apps).\n\n```csharp\nDBChooser chooser;\nconst int dropboxRequest = 0; // You can change this if needed\nconst string dropboxAppKey = \"APP_KEY\";\n\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\t// Set our view from the \"main\" layout resource\n\tSetContentView (Resource.Layout.Main);\n\n\tchooser = new DBChooser (dropboxAppKey);\n\n\t// Get our button from the layout resource,\n\t// and attach an event to it\n\tFindViewById\u003cButton\u003e (Resource.Id.btnDirect).Click += delegate {\n\t\t// It could be:\n\t\t// DBChooser.ResultType.DirectLink\n\t\t// DBChooser.ResultType.PreviewLink or\n\t\t// DBChooser.ResultType.FileContent\n\t\tchooser.ForResultType (DBChooser.ResultType.Type).Launch (this, dropboxRequest);\n\t};\n}\n```\n\nThe Chooser coordinates with the Dropbox app to allow the user to select files without having to worry about the usual authorization flow. In order to handle the response when the user returns to your app, you\u0027ll need to override **OnActivityResult** method:\n\n```csharp\nprotected override void OnActivityResult (int requestCode, Result resultCode, Intent data)\n{\n\tif (requestCode != dropboxRequest)\n\t\tbase.OnActivityResult (requestCode, resultCode, data);\n\n\tif (resultCode != Result.Ok) {\n\t\t// Failed or was cancelled by the user.\n\t}\n\t\n\tvar result = new DBChooser.Result (data);\n\n\t// Handle the result\n\n}\n```\n\n## Link types\n\nThe Chooser can be configured to return one of three link types.\n\n**ResultType.PreviewLink** links are the default type of link returned by the Chooser. Preview links point to a human-friendly preview page of a file and are great for sharing. You can read more about links to Dropbox files in our Help Center. Note that users may disable this link at a later point if they choose.\n\n**ResultType.DirectLink** links point directly to the contents of the file and are useful for downloading the file itself. Unlike preview links, however, they will expire after four hours, so make sure to download the contents of the file immediately after the file is chosen.\n\n**ResultType.FileContent** links (Android only) point to the actual file on the local device and let your app take advantage of files cached by the Dropbox app. However, these files are temporary and can be cleaned up by the operating system at any point, so you should copy it and manage it within your app if you need to keep the contents of a file.","Hash":"53e4b44b6449c5f2af66e74f6924c0d7","TargetPlatforms":["ios","android"],"TrialHash":null}